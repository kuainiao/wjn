Redis的有多快？
Redis自带一个叫redis-benchmark的工具来模拟N个客户端同时发出M个请求（类似于Apache ab程序）你可以使用redis-benchmark -h来查看基准参数。
以下参数被支持：

Usage: redis-benchmark [-h <host>] [-p <port>] [-c <clients>] [-n <requests]> [-k <boolean>]

 -h <hostname>      Server hostname (default 127.0.0.1)
 -p <port>          Server port (default 6379)
 -s <socket>        Server socket (overrides host and port)
 -a <password>      Password for Redis Auth
 -c <clients>       Number of parallel connections (default 50)
 -n <requests>      Total number of requests (default 100000)
 -d <size>          Data size of SET/GET value in bytes (default 2)
 -dbnum <db>        SELECT the specified db number (default 0)
 -k <boolean>       1=keep alive 0=reconnect (default 1)
 -r <keyspacelen>   Use random keys for SET/GET/INCR, random values for SADD
  Using this option the benchmark will expand the string __rand_int__
  inside an argument with a 12 digits number in the specified range
  from 0 to keyspacelen-1. The substitution changes every time a command
  is executed. Default tests use this to hit random keys in the
  specified range.
 -P <numreq>        Pipeline <numreq> requests. Default 1 (no pipeline).
 -q                 Quiet. Just show query/sec values
 --csv              Output in CSV format
 -l                 Loop. Run the tests forever
 -t <tests>         Only run the comma separated list of tests. The test
                    names are the same as the ones produced as output.
 -I                 Idle mode. Just open N idle connections and wait.
你需要在基准测试之前启动一个Redis实例。
一般这样启动测试：
redis-benchmark -q -n 100000
这个工具使用起来非常方便，同时你可以使用自己的基准测试工具，不过开始基准测试时候，我们需要注意一些细节。
只运行一些测试用例的子集
你不必每次都运行redis-benchmark默认的所有测试。使用-t参数可以选择你需要运行的测试用例，比如下面的范例：
$ redis-benchmark -t set,lpush -n 100000 -q
SET: 74239.05 requests per second
LPUSH: 79239.30 requests per second
在上面的测试中，我们只运行了SET和LPUSH命令，并且运行在安静模式中（使用-q参数）。也可以直接指定命令来直接运行，比如下面的范例：
$ redis-benchmark -n 100000 -q script load "redis.call('set','foo','bar')"
script load redis.call('set','foo','bar'): 69881.20 requests per second
选择测试键的范围大小
默认情况下面，基准测试使用单一的键。在一个基于内存的数据库里，单一键测试和真实情况下面不会有巨大变化。当然，使用一个大的键范围空间，可以模拟现实情况下面的缓存不命中情况。
这个时候我们可以使用-r命令。比如，假设我们想设置10万随机键连续SET 100万次，我们可以使用下列的命令：
$ redis-cli flushall
OK

$ redis-benchmark -t set -r 100000 -n 1000000
====== SET ======
  1000000 requests completed in 13.86 seconds
  50 parallel clients
  3 bytes payload
  keep alive: 1

99.76% `<=` 1 milliseconds
99.98% `<=` 2 milliseconds
100.00% `<=` 3 milliseconds
100.00% `<=` 3 milliseconds
72144.87 requests per second

$ redis-cli dbsize
(integer) 99993
使用流水线
默认情况下，每个客户端都是在一个请求完成之后才发送下一个请求（基准会模拟50个客户端除非使用-c指定特别的数量），这意味着服务器几乎是按顺序读取每个客户端的命令。也是RTT也付款。
真实世界会更复杂，Redis支持/主题/流水线，使得可以一次性执行多条命令成为可能。Redis流水线可以提高服务器的TPS。下面这个案例在Macbook air 11“上使用流水线组织16条命令的测试范例：
$ redis-benchmark -n 1000000 -t set,get -P 16 -q
SET: 403063.28 requests per second
GET: 508388.41 requests per second
记录在多条命令需要处理时候使用流水线。
陷阱和错误的认识
第一点是显而易见的：基准测试的黄金准则是使用相同的标准。用相同的任务量测试不同版本的Redis，或者用相同的参数测试测试不同版本Redis。如果把Redis和其他工具测试，那就需要小心功能细节差异。
Redis是一个服务器：所有的命令都包含网络或IPC消耗。这意味着和它和SQLite，Berkeley DB，Tokyo / Kyoto Cabinet等比起起无意义，因为大部分的消耗都在网络协议上面。
Redis的大部分常用命令都有确认返回。有些数据存储系统则没有（比较MongoDB的写操作没有返回确认）。把Redis和其他单向调制命令存储系统比较意义不大。
简单的循环操作Redis其实不是对Redis进行基准测试，而是测试你的网络（或者IPC）延迟。想要真正测试Redis，需要使用多个连接（比如redis-benchmark），或者使用pipelining来聚合多个命令，另外还可以采用多线程或多进程。
Redis是一个内存数据库，同时提供一些可选的持久化功能。如果你想和一个持久化服务器（MySQL，PostgreSQL等等）对比的话，那你需要考虑启用AOF和适当的fsync策略。
Redis是单线程服务。它并没有设计为多CPU进行优化。如果想要从多核获取好处，那就考虑启用多个实例吧。将单实例Redis和多线程数据库对比是不公平的。
一个普遍的误解是redis-benchmark特意让基准测试看起来更好，所表现出来的数据像是人造的，而不是真实产品下面的。
Redis-benchmark程序可以简单快捷的对给定硬件条件下面的机器计算出性能参数。但是，通常情况下面这并不是Redis服务器可以达到的最大吞吐量。事实上，使用流水线和更快的客户端hiredis）可以达到更大的吞吐量。redis-benchmark默认情况下面仅仅使用并发来提高吞吐量（创建多条连接）。它并没有使用流水线或者其他并行技术（仅仅多条连接，而不是多线程） 。
如果想使用流水线模式来进行基准测试（了达到更高的吞吐量），可以使用-P参数。这种方案的确可以提高性能，有很多使用Redis的应用在生产环境中这样做。
最后，基准测试需要使用相同的操作和数据来对比，如果这些不一样，那么基准测试是无意义的。
比如，Redis和memcached可以在单线程模式下面对比GET / SET操作。两者都是内存数据库，协议也基本相同，甚至把多个请求合并为一条请求的方式也类似（pipelining）在使用相同数量的连接后，这个对比是很有意义的。
下面这个很不错例子是在Redis（antirez）和memcached（dormando）测试的。
antirez 1 - 在Redis，Memcached，速度，基准和厕所
dormando - 雷迪斯VS Memcached（稍微好一点的长凳）
antirez 2 - Memcached / Redis基准测试的更新
你可以发现相同条件下面最终结果是两者差别不大。请注意最终测试时候，两人都经过了充分优化。
最后，当特别高性能的服务器在基准测试时候（比如Redis，memcached这类），很难让服务器性能充分发挥，通常情况下，客户端回事瓶颈限制而不是服务器端在这种情况下面，客户端（比如基准程序自身）需要优化，或者使用多实例，从而能达到最大的吞吐量。
影响Redis性能的因素
有几个因素直接决定Redis的性能，它们能够改变基准测试的结果，所以我们必须注意它们。一般情况下，Redis默认参数已经可以提供足够的性能，不需要调优。
网络带宽和延迟通常是最大的短板。建议在基准测试之前使用ping来检查服务端到客户端的延迟。根据带宽，可以计算出最大的吞吐量。比如将4 KB的字符串塞入Redis，吞吐量是100000 q / s，那么实际需要3.2 Gbits / s的带宽，所以需要10 GBits / s网络连接，1 Gbits / s是不够的。在很多线上服务中，Redis吞吐会先被网络带宽限制住，而不是CPU。为了达到高吞吐量突破TCP / IP限制，最后采用10 Gbits / s的网卡，或者多个1 Gbits / s网卡。
CPU是另外一个重要的影响因素，由于是单线程模型，Redis更喜欢大缓存快速CPU，而不是多核。这种场景下面，比较推荐Intel CPU.AMD CPU可能只有Intel CPU的一半性能（通过对Nehalem EP / Westmere EP / Sandy平台的对比）。当其他条件相当时候，CPU就成了redis-benchmark的限制因素。
在小对象存取时候，内存速度和带宽看上去不是很重要，但是对大对象（> 10 KB），它们可以得到重要起来，不过通常情况下面，倒不至于为了优化Redis而购买更高性能的内存模块。
Redis在VM上会变慢。虚拟化对普通操作会有额外的消耗，Redis对系统调用和网络终端不会有太多的开销。建议把Redis运行在物理机器上，特别是当你很在意延迟时间在最前进的虚拟化设备（VMWare）上面，redis-benchmark的测试结果比物理机器上慢了一倍，很多CPU时间被消费在系统调用和中断上面。
如果服务器和客户端都运行在同一个机器上面，那么TCP / IP环回和unix域套接字都可以使用。对于Linux来说，使用unix套接字可以比TCP / IP环回快50％。默认redis-benchmark是使用TCP / IP环回。当大量使用流水线时候，unix域sockets的优势就不那么明显了。
当大量使用流水线时候，unix域sockets的优势就不那么明显了。
当使用网络连接时，并且以太网网数据包在1500字节以下时，将多条命令包装成流水线可以大大提高效率。事实上，处理10字节，100字节，1000字节的请求时候，吞吐量是差不多的，详细可以见下图。
数据大小影响
在多核CPU服务器上面，Redis的性能还依赖NUMA配置和处理器绑定位置。最明显的影响是redis-benchmark会随机使用CPU内核。为了获得精准的结果，需要使用固定处理器工具可以使用taskset或numactl）最有效的办法是将客户端和服务端分离到两个不同的CPU来高校使用三级缓存。这里有一些使用4 KB数据集的基准测试，针对三种CPU伊斯坦布尔，Intel Nehalem EX和Intel Westmere）使用不同的配置。请注意，这不是针对CPU的测试。
NUMA图表
在高配置下面，客户端的连接数也是一个重要的因素。得益于epoll / kqueue，Redis的事件循环具有相当可扩展性.Redis已经在超过60000连接下面基准测试过，仍然可以维持50000 q / s一条经验法则是，30000的连接数只有100连接的一个吞吐量。下面有一个关于连接数和吞吐量的测试。
连接图
在高配置下面，可以通过调优NIC获得更高性能。最高性能在绑定Rx / Tx队列和CPU内核下面才能达到，还需要开启RPS（网卡中断负载均衡）更多信息可以在线程。巨型框架还可以在大对象中使用时候获得更高性能。
在不同的平台下面，Redis可以被编译成不同的内存分配方式（libc malloc，jemalloc，tcmalloc），他们在不同速度，连续和非连续片段下会有不一样的表现如果你不是自己编译的Redis，可以使用INFO命令来检查内存分配方式。请注意，大部分基准测试不会长时间运行来感知不同分配模式下面的差异，只能通过生产环境下面的Redis实例来查看。
其他需要注意的点
任何基准测试的一个重要目标是获得可重现的结果，这样才能将此和其他测试进行对比。
一个好的实践是尽可能在隔离的硬件上面测试。如果没法实现，那就需要检测基准没有受其他服务器活动影响。
有些配置（桌面环境和笔记本，有些服务器也会）会使用可变的CPU分配策略。这种策略可以在OS层面配置。有些CPU型号相对其他能更好的调整CPU负载。为了达到可重现的测试结果，最好在做基准测试时候设定CPU到最高使用限制。
一个重要因素是配置尽可能大内存，千万不要使用SWAP。注意32位和64位Redis有不同的内存限制。
如果你计划在基准测试时候使用RDB或AOF，请注意不要让系统同时有其他I / O操作。避免将RDB或AOF文件放到NAS或NFS共享或其他依赖网络的存储设备上面（比较亚马逊EC2上的EBS）。
将Redis日志级别设置到警告或者通知。避免将日志放到远程文件系统。
避免使用检测工具，它们会影响基准测试结果。使用INFO来查看服务器状态没问题，但是使用MONITOR将大大影响测试准确度。
不同云主机和物理机器上的基准测试结果
这些测试模拟了50客户端和200w请求。
使用了Redis 2.6.14。
使用了回环网卡。
key的范围是100 w。
同时测试了有流水线和没有的情况（16条命令使用流水线）。
Intel（R）Xeon（R）CPU E5520 @ 2.27GHz（带流水线）
$ ./redis-benchmark -r 1000000 -n 2000000 -t get,set,lpush,lpop -P 16 -q
SET: 552028.75 requests per second
GET: 707463.75 requests per second
LPUSH: 767459.75 requests per second
LPOP: 770119.38 requests per second
Intel（R）Xeon（R）CPU E5520 @ 2.27GHz（无流水线）
$ ./redis-benchmark -r 1000000 -n 2000000 -t get,set,lpush,lpop -q
SET: 122556.53 requests per second
GET: 123601.76 requests per second
LPUSH: 136752.14 requests per second
LPOP: 132424.03 requests per second
Linode 2048实例（带流水线）
$ ./redis-benchmark -r 1000000 -n 2000000 -t get,set,lpush,lpop -q -P 16
SET: 195503.42 requests per second
GET: 250187.64 requests per second
LPUSH: 230547.55 requests per second
LPOP: 250815.16 requests per second
Linode 2048实例（无流水线）
$ ./redis-benchmark -r 1000000 -n 2000000 -t get,set,lpush,lpop -q
SET: 35001.75 requests per second
GET: 37481.26 requests per second
LPUSH: 36968.58 requests per second
LPOP: 35186.49 requests per second
更多使用管道的测试
$ redis-benchmark -n 100000

====== SET ======
  100007 requests completed in 0.88 seconds
  50 parallel clients
  3 bytes payload
  keep alive: 1

58.50% <= 0 milliseconds
99.17% <= 1 milliseconds
99.58% <= 2 milliseconds
99.85% <= 3 milliseconds
99.90% <= 6 milliseconds
100.00% <= 9 milliseconds
114293.71 requests per second

====== GET ======
  100000 requests completed in 1.23 seconds
  50 parallel clients
  3 bytes payload
  keep alive: 1

43.12% <= 0 milliseconds
96.82% <= 1 milliseconds
98.62% <= 2 milliseconds
100.00% <= 3 milliseconds
81234.77 requests per second

====== INCR ======
  100018 requests completed in 1.46 seconds
  50 parallel clients
  3 bytes payload
  keep alive: 1

32.32% <= 0 milliseconds
96.67% <= 1 milliseconds
99.14% <= 2 milliseconds
99.83% <= 3 milliseconds
99.88% <= 4 milliseconds
99.89% <= 5 milliseconds
99.96% <= 9 milliseconds
100.00% <= 18 milliseconds
68458.59 requests per second

====== LPUSH ======
  100004 requests completed in 1.14 seconds
  50 parallel clients
  3 bytes payload
  keep alive: 1

62.27% <= 0 milliseconds
99.74% <= 1 milliseconds
99.85% <= 2 milliseconds
99.86% <= 3 milliseconds
99.89% <= 5 milliseconds
99.93% <= 7 milliseconds
99.96% <= 9 milliseconds
100.00% <= 22 milliseconds
100.00% <= 208 milliseconds
88109.25 requests per second

====== LPOP ======
  100001 requests completed in 1.39 seconds
  50 parallel clients
  3 bytes payload
  keep alive: 1

54.83% <= 0 milliseconds
97.34% <= 1 milliseconds
99.95% <= 2 milliseconds
99.96% <= 3 milliseconds
99.96% <= 4 milliseconds
100.00% <= 9 milliseconds
100.00% <= 208 milliseconds
71994.96 requests per second
注意：包大小从256到1024或者4096字节不会改变结果的量级（但是到1024字节后，GETs操作会变慢）同样的，50到256客户端的测试结果相同10个客户端时候，吞吐量会变小（译者按：总量到不了最大吞吐量）。
不同机器可以获得不一样的结果，下面是Intel T5500 1.66 GHz在Linux 2.6下面的结果：
$ ./redis-benchmark -q -n 100000
SET: 53684.38 requests per second
GET: 45497.73 requests per second
INCR: 39370.47 requests per second
LPUSH: 34803.41 requests per second
LPOP: 37367.20 requests per second
另外一个是64位Xeon L5420 2.5 GHz的结果：
$ ./redis-benchmark -q -n 100000
PING: 111731.84 requests per second
SET: 108114.59 requests per second
GET: 98717.67 requests per second
INCR: 95241.91 requests per second
LPUSH: 104712.05 requests per second
LPOP: 93722.59 requests per second
高性能硬件下面的基准测试
Redis 2.4.2
默认连接数，数据包大小256字节。
Linux是SLES10 SP3 2.6.16.60-0.54.5-smp，CPU是 Intel X5670 @ 2.93 GHz。
固定CPU，但是使用不同CPU内核。
使用unix域套接字：
$ numactl -C 6 ./redis-benchmark -q -n 100000 -s /tmp/redis.sock -d 256
PING (inline): 200803.22 requests per second
PING: 200803.22 requests per second
MSET (10 keys): 78064.01 requests per second
SET: 198412.69 requests per second
GET: 198019.80 requests per second
INCR: 200400.80 requests per second
LPUSH: 200000.00 requests per second
LPOP: 198019.80 requests per second
SADD: 203665.98 requests per second
SPOP: 200803.22 requests per second
LPUSH (again, in order to bench LRANGE): 200000.00 requests per second
LRANGE (first 100 elements): 42123.00 requests per second
LRANGE (first 300 elements): 15015.02 requests per second
LRANGE (first 450 elements): 10159.50 requests per second
LRANGE (first 600 elements): 7548.31 requests per second
使用TCP环回：
$ numactl -C 6 ./redis-benchmark -q -n 100000 -d 256
PING (inline): 145137.88 requests per second
PING: 144717.80 requests per second
MSET (10 keys): 65487.89 requests per second
SET: 142653.36 requests per second
GET: 142450.14 requests per second
INCR: 143061.52 requests per second
LPUSH: 144092.22 requests per second
LPOP: 142247.52 requests per second
SADD: 144717.80 requests per second
SPOP: 143678.17 requests per second
LPUSH (again, in order to bench LRANGE): 143061.52 requests per second
LRANGE (first 100 elements): 29577.05 requests per second
LRANGE (first 300 elements): 10431.88 requests per second
LRANGE (first 450 elements): 7010.66 requests per second
LRANGE (first 600 elements): 5296.61 requests per second